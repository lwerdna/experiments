#!/usr/bin/env python3

import os
import sys
import random

from sfcurves.hilbert import forward, reverse, outline

palette_viridis = [
(0x44, 0x01, 0x54), (0x44, 0x02, 0x55), (0x44, 0x03, 0x57), (0x45, 0x05, 0x58),
(0x45, 0x06, 0x5A), (0x45, 0x08, 0x5B), (0x46, 0x09, 0x5C), (0x46, 0x0B, 0x5E),
(0x46, 0x0C, 0x5F), (0x46, 0x0E, 0x61), (0x47, 0x0F, 0x62), (0x47, 0x11, 0x63),
(0x47, 0x12, 0x65), (0x47, 0x14, 0x66), (0x47, 0x15, 0x67), (0x47, 0x16, 0x69),
(0x47, 0x18, 0x6A), (0x48, 0x19, 0x6B), (0x48, 0x1A, 0x6C), (0x48, 0x1C, 0x6E),
(0x48, 0x1D, 0x6F), (0x48, 0x1E, 0x70), (0x48, 0x20, 0x71), (0x48, 0x21, 0x72),
(0x48, 0x22, 0x73), (0x48, 0x23, 0x74), (0x47, 0x25, 0x75), (0x47, 0x26, 0x76),
(0x47, 0x27, 0x77), (0x47, 0x28, 0x78), (0x47, 0x2A, 0x79), (0x47, 0x2B, 0x7A),
(0x47, 0x2C, 0x7B), (0x46, 0x2D, 0x7C), (0x46, 0x2F, 0x7C), (0x46, 0x30, 0x7D),
(0x46, 0x31, 0x7E), (0x45, 0x32, 0x7F), (0x45, 0x34, 0x7F), (0x45, 0x35, 0x80),
(0x45, 0x36, 0x81), (0x44, 0x37, 0x81), (0x44, 0x39, 0x82), (0x43, 0x3A, 0x83),
(0x43, 0x3B, 0x83), (0x43, 0x3C, 0x84), (0x42, 0x3D, 0x84), (0x42, 0x3E, 0x85),
(0x42, 0x40, 0x85), (0x41, 0x41, 0x86), (0x41, 0x42, 0x86), (0x40, 0x43, 0x87),
(0x40, 0x44, 0x87), (0x3F, 0x45, 0x87), (0x3F, 0x47, 0x88), (0x3E, 0x48, 0x88),
(0x3E, 0x49, 0x89), (0x3D, 0x4A, 0x89), (0x3D, 0x4B, 0x89), (0x3D, 0x4C, 0x89),
(0x3C, 0x4D, 0x8A), (0x3C, 0x4E, 0x8A), (0x3B, 0x50, 0x8A), (0x3B, 0x51, 0x8A),
(0x3A, 0x52, 0x8B), (0x3A, 0x53, 0x8B), (0x39, 0x54, 0x8B), (0x39, 0x55, 0x8B),
(0x38, 0x56, 0x8B), (0x38, 0x57, 0x8C), (0x37, 0x58, 0x8C), (0x37, 0x59, 0x8C),
(0x36, 0x5A, 0x8C), (0x36, 0x5B, 0x8C), (0x35, 0x5C, 0x8C), (0x35, 0x5D, 0x8C),
(0x34, 0x5E, 0x8D), (0x34, 0x5F, 0x8D), (0x33, 0x60, 0x8D), (0x33, 0x61, 0x8D),
(0x32, 0x62, 0x8D), (0x32, 0x63, 0x8D), (0x31, 0x64, 0x8D), (0x31, 0x65, 0x8D),
(0x31, 0x66, 0x8D), (0x30, 0x67, 0x8D), (0x30, 0x68, 0x8D), (0x2F, 0x69, 0x8D),
(0x2F, 0x6A, 0x8D), (0x2E, 0x6B, 0x8E), (0x2E, 0x6C, 0x8E), (0x2E, 0x6D, 0x8E),
(0x2D, 0x6E, 0x8E), (0x2D, 0x6F, 0x8E), (0x2C, 0x70, 0x8E), (0x2C, 0x71, 0x8E),
(0x2C, 0x72, 0x8E), (0x2B, 0x73, 0x8E), (0x2B, 0x74, 0x8E), (0x2A, 0x75, 0x8E),
(0x2A, 0x76, 0x8E), (0x2A, 0x77, 0x8E), (0x29, 0x78, 0x8E), (0x29, 0x79, 0x8E),
(0x28, 0x7A, 0x8E), (0x28, 0x7A, 0x8E), (0x28, 0x7B, 0x8E), (0x27, 0x7C, 0x8E),
(0x27, 0x7D, 0x8E), (0x27, 0x7E, 0x8E), (0x26, 0x7F, 0x8E), (0x26, 0x80, 0x8E),
(0x26, 0x81, 0x8E), (0x25, 0x82, 0x8E), (0x25, 0x83, 0x8D), (0x24, 0x84, 0x8D),
(0x24, 0x85, 0x8D), (0x24, 0x86, 0x8D), (0x23, 0x87, 0x8D), (0x23, 0x88, 0x8D),
(0x23, 0x89, 0x8D), (0x22, 0x89, 0x8D), (0x22, 0x8A, 0x8D), (0x22, 0x8B, 0x8D),
(0x21, 0x8C, 0x8D), (0x21, 0x8D, 0x8C), (0x21, 0x8E, 0x8C), (0x20, 0x8F, 0x8C),
(0x20, 0x90, 0x8C), (0x20, 0x91, 0x8C), (0x1F, 0x92, 0x8C), (0x1F, 0x93, 0x8B),
(0x1F, 0x94, 0x8B), (0x1F, 0x95, 0x8B), (0x1F, 0x96, 0x8B), (0x1E, 0x97, 0x8A),
(0x1E, 0x98, 0x8A), (0x1E, 0x99, 0x8A), (0x1E, 0x99, 0x8A), (0x1E, 0x9A, 0x89),
(0x1E, 0x9B, 0x89), (0x1E, 0x9C, 0x89), (0x1E, 0x9D, 0x88), (0x1E, 0x9E, 0x88),
(0x1E, 0x9F, 0x88), (0x1E, 0xA0, 0x87), (0x1F, 0xA1, 0x87), (0x1F, 0xA2, 0x86),
(0x1F, 0xA3, 0x86), (0x20, 0xA4, 0x85), (0x20, 0xA5, 0x85), (0x21, 0xA6, 0x85),
(0x21, 0xA7, 0x84), (0x22, 0xA7, 0x84), (0x23, 0xA8, 0x83), (0x23, 0xA9, 0x82),
(0x24, 0xAA, 0x82), (0x25, 0xAB, 0x81), (0x26, 0xAC, 0x81), (0x27, 0xAD, 0x80),
(0x28, 0xAE, 0x7F), (0x29, 0xAF, 0x7F), (0x2A, 0xB0, 0x7E), (0x2B, 0xB1, 0x7D),
(0x2C, 0xB1, 0x7D), (0x2E, 0xB2, 0x7C), (0x2F, 0xB3, 0x7B), (0x30, 0xB4, 0x7A),
(0x32, 0xB5, 0x7A), (0x33, 0xB6, 0x79), (0x35, 0xB7, 0x78), (0x36, 0xB8, 0x77),
(0x38, 0xB9, 0x76), (0x39, 0xB9, 0x76), (0x3B, 0xBA, 0x75), (0x3D, 0xBB, 0x74),
(0x3E, 0xBC, 0x73), (0x40, 0xBD, 0x72), (0x42, 0xBE, 0x71), (0x44, 0xBE, 0x70),
(0x45, 0xBF, 0x6F), (0x47, 0xC0, 0x6E), (0x49, 0xC1, 0x6D), (0x4B, 0xC2, 0x6C),
(0x4D, 0xC2, 0x6B), (0x4F, 0xC3, 0x69), (0x51, 0xC4, 0x68), (0x53, 0xC5, 0x67),
(0x55, 0xC6, 0x66), (0x57, 0xC6, 0x65), (0x59, 0xC7, 0x64), (0x5B, 0xC8, 0x62),
(0x5E, 0xC9, 0x61), (0x60, 0xC9, 0x60), (0x62, 0xCA, 0x5F), (0x64, 0xCB, 0x5D),
(0x67, 0xCC, 0x5C), (0x69, 0xCC, 0x5B), (0x6B, 0xCD, 0x59), (0x6D, 0xCE, 0x58),
(0x70, 0xCE, 0x56), (0x72, 0xCF, 0x55), (0x74, 0xD0, 0x54), (0x77, 0xD0, 0x52),
(0x79, 0xD1, 0x51), (0x7C, 0xD2, 0x4F), (0x7E, 0xD2, 0x4E), (0x81, 0xD3, 0x4C),
(0x83, 0xD3, 0x4B), (0x86, 0xD4, 0x49), (0x88, 0xD5, 0x47), (0x8B, 0xD5, 0x46),
(0x8D, 0xD6, 0x44), (0x90, 0xD6, 0x43), (0x92, 0xD7, 0x41), (0x95, 0xD7, 0x3F),
(0x97, 0xD8, 0x3E), (0x9A, 0xD8, 0x3C), (0x9D, 0xD9, 0x3A), (0x9F, 0xD9, 0x38),
(0xA2, 0xDA, 0x37), (0xA5, 0xDA, 0x35), (0xA7, 0xDB, 0x33), (0xAA, 0xDB, 0x32),
(0xAD, 0xDC, 0x30), (0xAF, 0xDC, 0x2E), (0xB2, 0xDD, 0x2C), (0xB5, 0xDD, 0x2B),
(0xB7, 0xDD, 0x29), (0xBA, 0xDE, 0x27), (0xBD, 0xDE, 0x26), (0xBF, 0xDF, 0x24),
(0xC2, 0xDF, 0x22), (0xC5, 0xDF, 0x21), (0xC7, 0xE0, 0x1F), (0xCA, 0xE0, 0x1E),
(0xCD, 0xE0, 0x1D), (0xCF, 0xE1, 0x1C), (0xD2, 0xE1, 0x1B), (0xD4, 0xE1, 0x1A),
(0xD7, 0xE2, 0x19), (0xDA, 0xE2, 0x18), (0xDC, 0xE2, 0x18), (0xDF, 0xE3, 0x18),
(0xE1, 0xE3, 0x18), (0xE4, 0xE3, 0x18), (0xE7, 0xE4, 0x19), (0xE9, 0xE4, 0x19),
(0xEC, 0xE4, 0x1A), (0xEE, 0xE5, 0x1B), (0xF1, 0xE5, 0x1C), (0xF3, 0xE5, 0x1E),
(0xF6, 0xE6, 0x1F), (0xF8, 0xE6, 0x21), (0xFA, 0xE6, 0x22), (0xFD, 0xE7, 0x24)
]

if __name__ == '__main__':
	#--------------------------------------------------------------------------
	# get input data
	#--------------------------------------------------------------------------
	data = b''
	with open('/bin/ls', 'rb') as fp:
		data = fp.read()
	# calculate dimensions
	width = 2
	length = 4
	while length < len(data):
		length *= 4
		width *= 2
	# random regions
	marks = [0]+[random.randint(0,len(data)-1) for _ in range(32)]+[len(data)-1]
	marks = sorted(list(set(marks)))
	region_ranges = zip(marks[0:-1], marks[1:])
	#region_ranges = [(0,10), (10,100), (100,1000)]
	# calculate enclosing polygon
	regions = []
	for rr in region_ranges:
		enclosure = outline(rr[0], rr[1], length)
		enclosure = list(map(lambda pt: (pt[0], width-1-pt[1]), enclosure))
		regions.append({'start':rr[0], 'end':rr[1], 'enclosure':enclosure})

	#--------------------------------------------------------------------------
	# pygame
	#--------------------------------------------------------------------------
	import pygame
	from pygame.locals import *	
	pygame.init()
	surface_win = pygame.display.set_mode((width, width))
	pygame.display.set_caption('hilbert test')

	# draw
	surface_win.fill((0,0,0))
	px = pygame.PixelArray(surface_win)
	for d in range(len(data)):
		(x,y) = forward(d, length)
		px[x,width-1-y] = palette_viridis[data[d]]
	
	#for region in regions:
	#	pygame.draw.polygon(surface_win, (255,255,255), region['enclosure'], 1)

	surface_bg = px.make_surface()
	del px

	redraw = True
	while 1:
		# process pygame events
		for event in pygame.event.get():
			if event.type == QUIT:
				pygame.quit()
				sys.exit()

		(x,y) = pygame.mouse.get_pos()
		d = reverse(x, width-1-y, length)
		region = next((r for r in regions if d>=r['start'] and d<r['end']), None)
		if region:
			surface_win.blit(surface_bg, (0,0))
			pygame.draw.polygon(surface_win, (255,255,255), region['enclosure'], 1)
			redraw = True

		if redraw:
			#surface.fill((255,255,255))

			#points = [forward(d, length) for d in range(length)]
			#for ((x0,y0),(x1,y1)) in zip(points[:-1], points[1:]):
			#	(x0,y0,x1,y1) = (4*x0+1, img_height - (4*y0+1), 4*x1+1, img_height - (4*(y1)+1))
			#	pygame.draw.line(surface, (255,0,0), (x0,y0), (x1,y1))
			pygame.display.update()
			redraw = False
